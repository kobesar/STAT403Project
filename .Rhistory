ridge <- glmnet(x_train, y_train, alpha = 0, lambda = lambda)
coeff <- matrix(NA, nrow = 30, ncol = 100)
for (i in 1:30) {
for (j in 1:100) {
coeff[i, j] <- coef(ridge)[, j][i+1]
}
}
plot(x = log(lambda), y = coeff[1,], type = "l", ylab = "Coefficients",
ylim = c(min(coeff), max(coeff)), col = 1)
plot(x = log(lambda), y = coeff[1,], type = "l", ylab = "Coefficients",
ylim = c(min(coeff), max(coeff)), col = 1)
for(i in 2:30) {
lines(x = log(lambda), y = coeff[i,], col = i)
}
abline(h = 0, lwd = 1.5, lty = 2)
lasso <- glmnet(x_train, y_train, alpha = 1, lambda = lambda)
cv_lasso <- cv.glmnet(x_train, y_train, alpha = 1)
coeff <- matrix(NA, nrow = 30, ncol = 100)
for (i in 1:30) {
for (j in 1:100) {
coeff[i, j] <- coef(lasso)[, j][i+1]
}
}
plot(x = log(lambda), y = coeff[1,], type = "l", ylab = "Coefficients",
ylim = c(min(coeff), max(coeff)), col = 1)
for(i in 2:30) {
lines(x = log(lambda), y = coeff[i,], col = i)
}
abline(h = 0, lwd = 1.5, lty = 2)
View(lasso)
View(coeff)
paste(c(1, 3, 6))
paste(c(1, 3, 6), sep = ", ")
pred <- predict(ridge, s = cv_ridge$lambda.min, newx = x_test)
View(x_test)
x_test <- data.frame(x[-splt])
pred <- predict(ridge, s = cv_ridge$lambda.min, newx = x_test)
View(x_test)
x_test <- data.frame(x[-splt, ])
pred <- predict(ridge, s = cv_ridge$lambda.min, newx = x_test)
x_test <- x[-splt, ]
pred <- predict(ridge, s = cv_ridge$lambda.min, newx = x_test)
test_mse <- mean((pred - y_train)^2)
View(x_train)
predict(ridge,s = cv_ridge$lambda.min)
predict(ridge,s = cv_ridge$lambda.min, newx = x_train)
predict(ridge,s = cv_ridge$lambda.min, newx = x_test)
x_test <- x[-splt, ]
pred <- predict(ridge, s = cv_ridge$lambda.min, newx = x_test)
test_mse <- mean((pred - y_test)^2)
pred <- predict(lasso, s = cv_lasso$lambda.min, newx = x_test)
test_mse <- mean((pred - y_test)^2)
View(coeff)
knitr::opts_chunk$set(echo = TRUE)
library(leaps)
library(glmnet)
set.seed(435)
x <- matrix(nrow = 200, ncol = 30)
for(i in 1:29) {
x[,i] <- rnorm(200, runif(1, -5, 5), 10)
}
x[,30] <- x[, 1] * 1.5 + rnorm(200)
index <- sample(2:29, 4)
x_sub <- x[, index]
coeff <- runif(5, -5, 4)
y <- x[,1]
for(i in 1:4) {
y <- y + coeff[i] * x_sub[, i]
}
y <- y + rnorm(200)
splt <- sample(nrow(x), nrow(x)* 0.8)
x_train <- x[splt,]
x_test <- x[-splt,]
y_train <- y[splt]
y_test <- y[-splt]
summary(regsubsets(y_train ~ ., data = data.frame(x_train), method = "forward", nvmax = 10))$outmat[10,]
lm1 <- lm(y_train ~ X1 + X3 + X5 + X6 + X9 + X13 + X18 + X22 + X26 + X28, data.frame(x_train))
ind <- c(1, 3, 5, 6, 9, 13, 18, 22, 26, 28)
x_test <- data.frame(x_test)
x_test <- x_test[,ind]
pred <- predict(lm1, data.frame(x_test))
test_mse <- mean((pred - y_test) ^ 2)
lm1 <- lm(y_train ~ X1 + X3 + X4 + X5 + X6 + X8 + X15 + X20 + X26 + X28, data.frame(x_train))
ind <- c(1, 3, 4, 5, 6, 8, 15, 20, 26, 28)
x_test <- data.frame(x_test)
x_test <- x_test[,ind]
x_test <- x[-splt,]
x_test <- data.frame(x_test)
x_test <- x_test[,ind]
pred <- predict(lm1, data.frame(x_test))
test_mse <- mean((pred - y_test) ^ 2)
lambda <- 10^seq(10, -2, length = 100)
ridge <- glmnet(x_train, y_train, alpha = 0, lambda = lambda)
cv_ridge <- cv.glmnet(x_train, y_train, alpha = 0)
coeff <- matrix(NA, nrow = 30, ncol = 100)
for (i in 1:30) {
for (j in 1:100) {
coeff[i, j] <- coef(ridge)[, j][i+1]
}
}
plot(x = log(lambda), y = coeff[1,], type = "l", ylab = "Coefficients",
ylim = c(min(coeff), max(coeff)), col = 1,
main = "Ridge Coefficients across Values of Lambda")
for(i in 2:30) {
lines(x = log(lambda), y = coeff[i,], col = i)
}
abline(h = 0, lwd = 1.5, lty = 2)
x_test <- x[-splt, ]
pred <- predict(ridge, s = cv_ridge$lambda.min, newx = x_test)
test_mse <- mean((pred - y_test)^2)
lasso <- glmnet(x_train, y_train, alpha = 1, lambda = lambda)
cv_lasso <- cv.glmnet(x_train, y_train, alpha = 1)
coeff <- matrix(NA, nrow = 30, ncol = 100)
for (i in 1:30) {
for (j in 1:100) {
coeff[i, j] <- coef(lasso)[, j][i+1]
}
}
plot(x = log(lambda), y = coeff[1,], type = "l", ylab = "Coefficients",
ylim = c(min(coeff), max(coeff)), col = 1,
main = "LASSO Coefficients across Values of Lambda")
for(i in 2:30) {
lines(x = log(lambda), y = coeff[i,], col = i)
}
abline(h = 0, lwd = 1.5, lty = 2)
View(coeff)
pred <- predict(lasso, s = cv_lasso$lambda.min, newx = x_test)
test_mse <- mean((pred - y_test)^2)
1000^2
setwd("C:/Users/kaije/OneDrive - UW/UW Classes/STAT 403/STAT403Project")
df <- read.csv("Data/31119913_National2020.csv")
View(df)
data <- read.csv("Data/31119913_National2020.csv")
cols <- str_split("age10
sex
educ18
income20
racism20
life
party
stanum
sizeplac
pres
weight
vote2016
votemeth
abortion
climatec", "\n")[[1]]
library(tidyverse)
cols <- str_split("age10
sex
educ18
income20
racism20
life
party
stanum
sizeplac
pres
weight
vote2016
votemeth
abortion
climatec", "\n")[[1]]
data_subset <- data %>%
select(cols)
View(data)
sum(data$pres == "Joe Biden")
sum(data$pres == "Joe Biden")/ 15351
# Boot of percent Biden
n <- nrow(data)
biden_perc <- c()
for(i in 1:10000) {
j <- sample(n, n, replace = T)
samp <- data_subset[j,]
num_biden <- sum(samp$pres == "Joe Biden")
biden_perc[i] <- num_biden / n
}
hist(biden_perc)
abline(h = 0.5)
for(i in 1:10000) {
j <- sample(n, n, replace = T)
samp <- data_subset[j,]
num_biden <- sum(samp$pres == "Joe Biden")
biden_perc[i] <- num_biden / n
}
hist(biden_perc)
abline(h = 0.5)
hist(biden_perc)
abline(v = 0.5)
hist(biden_perc)
set.seed(403)
for(i in 1:1000) {
j <- sample(n, n, replace = T)
samp <- data_subset[j,]
num_biden <- sum(samp$pres == "Joe Biden")
biden_perc[i] <- num_biden / n
}
hist(biden_perc)
mean(biden_perc)
median(biden_perc)
(samp$pres == "Joe Biden")
(samp$pres == "Joe Biden") * 1000
(samp$pres == "Joe Biden") * samp$weight
# Boot with weight
biden_perc2 <- c()
for(i in 1:1000) {
j <- sample(n, n, replace = T)
samp <- data_subset[j,]
num_biden <- sum((samp$pres == "Joe Biden") * samp$weight)
biden_perc2[i] <- num_biden / sum(samp$weight)
}
hist(biden_perc2)
mean(biden_perc2 > 0.5)
mean(biden_perc > 0.5)
sd(biden_perc2)
(mean(biden_per2) - 0.5) / sd(biden_perc2)
(mean(biden_perc2) - 0.5) / sd(biden_perc2)
mean(biden_perc2)
View(data_subset)
sum(is.na(data$pres))
sum(data$pres == "")
data$pres[478]
sum(data$pres == " ")
data_pres_subset <- data_subset %>%
filter(pres != " ")
# Initial boot with weight
biden_perc2 <- c()
for(i in 1:1000) {
j <- sample(n, n, replace = T)
samp <- data_pres_subset[j,]
num_biden <- sum((samp$pres == "Joe Biden") * samp$weight)
biden_perc2[i] <- num_biden / sum(samp$weight)
}
hist(biden_perc2)
mean(biden_perc2 > 0.5)
# Initial boot of percent Biden
n <- nrow(data_pres_subset)
# Initial boot with weight
biden_perc2 <- c()
for(i in 1:1000) {
j <- sample(n, n, replace = T)
samp <- data_pres_subset[j,]
num_biden <- sum((samp$pres == "Joe Biden") * samp$weight)
biden_perc2[i] <- num_biden / sum(samp$weight)
}
for(i in 1:1000) {
j <- sample(n, n, replace = T)
samp <- data_pres_subset[j,]
num_biden <- sum((samp$pres == "Joe Biden") * samp$weight)
biden_perc2[i] <- num_biden / sum(samp$weight)
}
hist(biden_perc2)
mean(biden_perc2 > 0.5)
mean(biden_perc2)
(mean(biden_perc2) - 0.5) / sd(biden_perc2)
for(i in 1:1000) {
j <- sample(n, n, replace = T)
samp <- data_pres_subset[j,]
num_biden <- sum(samp$pres == "Joe Biden")
biden_perc[i] <- num_biden / n
}
hist(biden_perc2)
abline(v = 0.5)
hist(biden_perc2)
abline(v = 0.5, col = "red")
hist(biden_perc2)
abline(v = 0.5, col = "red", lwd = 2, lty = 2)
ist(biden_perc2)
abline(v = 0.5, col = "red", lwd = 2)
hist(biden_perc2)
abline(v = 0.5, col = "red", lwd = 2)
sum(data$stanum == "California")
sum(data$stanum == "New York")
library(tidyverse)
library(maps)
library(usmap)
data <- readRDS("data/state_boot.RDS")
data_state <- data.frame(biden = as.factor(unlist(data)))
data_state$state <- str_to_lower(trimws(rownames(data_state)))
rownames(data_state) <- NULL
# Create the state map plot
plot_usmap(data = data_state, values = "biden", color = "white") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990")) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid = element_blank())  # Optional: Remove gridlines and borders
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE) +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990")) +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE) +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990")) +
labs(x = "", y = "") +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank(),
text = element_text(color = "white"))  # Remove axis labels
# Create the state map plot with custom label color
plot <- plot_usmap(data = data_state, values = "biden", color = "white", labels = FALSE) +
scale_fill_continuous(low = "blue", high = "red") +  # Adjust color scale as needed
theme_minimal()
# Add state labels with custom color
plot + geom_text(data = data_state, aes(label = state), color = "blue", size = 3)
?data_state
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, theme = theme(element_text(color = "white"))) +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990")) +
labs(x = "", y = "") +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
?plot_usmap
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE,
theme = usmap::theme_minimal() +
theme(text = element_text(color = "blue"))) +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990")) +
labs(x = "", y = "") +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE,
theme = theme_minimal() +
theme(text = element_text(color = "blue"))) +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990")) +
labs(x = "", y = "") +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "white") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990")) +
labs(x = "", y = "") +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "white",
theme = coord_map()) +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990")) +
labs(x = "", y = "") +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "white") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990")) +
labs(x = "", y = "") +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "gray80") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990")) +
labs(x = "", y = "") +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "gray100") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990")) +
labs(x = "", y = "") +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "gray100") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990")) +
labs(x = "", y = "", fill = "") +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
?scale_fill_manual
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "gray100") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990"), labels = c("Trump Win", "Biden Win")) +
labs(x = "", y = "", fill = "") +
theme_minimal() +
theme(panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "gray100") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990"), labels = c("Trump Win", "Biden Win")) +
labs(x = "", y = "", fill = "") +
theme_minimal() +
theme(legend.position = "top",
panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "gray100") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990"), labels = c("Trump Win", "Biden Win")) +
labs(x = "", y = "", fill = "") +
theme_minimal() +
theme(legend.position = "top",
legend.text = element_text(size = 16),
panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "gray100") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990"), labels = c("Trump Win", "Biden Win")) +
labs(x = "", y = "", fill = "") +
theme_minimal() +
theme(legend.position = "top",
legend.text = element_text(size = 14),
panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "gray100") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990"), labels = c("Trump Win", "Biden Win")) +
labs(x = "", y = "", fill = "") +
guides(fill = guide_legend(override.aes = list(fill = c("#d23368", "#2a3990"))))  # Assign custom colors to legend text
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "gray100") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990"), labels = c("Trump Win", "Biden Win")) +
labs(x = "", y = "", fill = "") +
guides(fill = guide_legend(override.aes = list(color = c("#d23368", "#2a3990"))))  # Assign custom colors to legend text
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "gray100") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990"), labels = c("Trump Win", "Biden Win")) +
labs(x = "", y = "", fill = "") +
theme_minimal() +
theme(legend.position = "top",
legend.text = element_text(size = 14),
panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "gray100") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990"), labels = c("Trump Win", "Biden Win")) +
labs(x = "", y = "", fill = "") +
theme_minimal() +
theme(legend.position = c(0.5, 0.9),
legend.text = element_text(size = 14),
panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "gray100") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990"), labels = c("Trump Win", "Biden Win")) +
labs(x = "", y = "", fill = "") +
theme_minimal() +
theme(legend.position = c(0.5, 0.95),
legend.direction = "horizontal",
legend.text = element_text(size = 14),
panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "gray100") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990"), labels = c("Trump", "Biden")) +
labs(x = "", y = "", fill = "") +
theme_minimal() +
theme(legend.position = c(0.5, 0.95),
legend.direction = "horizontal",
legend.text = element_text(size = 14),
panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
plot1 <- ggplot(data = plot1_data) +
geom_vline(xintercept = 0.5, linetype = 2, color = "grey60") +
geom_histogram(mapping = aes(pop_vote_wts, fill = vote),
breaks = seq(0.475, 0.55, by = 0.005), col = "black") +
geom_text(data = data.frame(x = 0.497, y = 180), aes(x = x, y = y, label = "Trump Wins"), color = "#d23368") +
geom_text(data = data.frame(x = 0.503, y = 180), aes(x = x, y = y, label = "Biden Wins"), color = "#2a3990") +
geom_segment(data = data.frame(
x1 = 0.498,
y1 = 175,
x2 = 0.496,
y2 = 175
), aes(x = x1, y = y1, xend = x2, yend = y2),
arrow = arrow(length = unit(0.2, "cm"), type="closed"),
size = 0.5, color = "#d23368") +
geom_segment(data = data.frame(
x1 = 0.502,
y1 = 175,
x2 = 0.504,
y2 = 175
),aes(x = x1, y = y1, xend = x2, yend = y2),
arrow = arrow(length = unit(0.2, "cm"), type="closed"),
size = 0.5, color = "#2a3990") +
ylim(c(0,190)) +
scale_fill_manual(values = c("Trump" = "#d23368", "Biden"="#2a3990")) +
labs(x = "Popular Vote", y = "Frequency", fill = "Winner",
title = "Bootstrap Simulated Results of Popular Vote") +
theme_minimal() +
theme(
legend.position = "none"
)
library(tidyverse)
pop_vote_no_wts <- readRDS("Data/pop_vote_no_wts.RDS")
pop_vote_wts <- readRDS("Data/pop_vote_wts.RDS")
vote <- ifelse(pop_vote_wts > 0.5, "Biden", "Trump")
plot1_data <- data.frame(vote, pop_vote_wts)
plot1 <- ggplot(data = plot1_data) +
geom_vline(xintercept = 0.5, linetype = 2, color = "grey60") +
geom_histogram(mapping = aes(pop_vote_wts, fill = vote),
breaks = seq(0.475, 0.55, by = 0.005), col = "black") +
geom_text(data = data.frame(x = 0.497, y = 180), aes(x = x, y = y, label = "Trump Wins"), color = "#d23368") +
geom_text(data = data.frame(x = 0.503, y = 180), aes(x = x, y = y, label = "Biden Wins"), color = "#2a3990") +
geom_segment(data = data.frame(
x1 = 0.498,
y1 = 175,
x2 = 0.496,
y2 = 175
), aes(x = x1, y = y1, xend = x2, yend = y2),
arrow = arrow(length = unit(0.2, "cm"), type="closed"),
size = 0.5, color = "#d23368") +
geom_segment(data = data.frame(
x1 = 0.502,
y1 = 175,
x2 = 0.504,
y2 = 175
),aes(x = x1, y = y1, xend = x2, yend = y2),
arrow = arrow(length = unit(0.2, "cm"), type="closed"),
size = 0.5, color = "#2a3990") +
ylim(c(0,190)) +
scale_fill_manual(values = c("Trump" = "#d23368", "Biden"="#2a3990")) +
labs(x = "Popular Vote", y = "Frequency", fill = "Winner",
title = "Bootstrap Simulated Results of Popular Vote") +
theme_minimal() +
theme(
legend.position = "none"
)
plot1
plot_usmap(data = data_state, values = "biden", color = "white", labels = TRUE, label_color = "gray100") +
scale_fill_manual(values = c("0" = "#d23368", "1"="#2a3990"), labels = c("Trump", "Biden")) +
labs(x = "", y = "", fill = "") +
theme_light() +
theme(legend.position = c(0.5, 0.95),
legend.direction = "horizontal",
legend.text = element_text(size = 14),
panel.border = element_blank(), panel.grid = element_blank(),
axis.text.x = element_blank(), axis.text.y = element_blank())  # Remove axis labels
